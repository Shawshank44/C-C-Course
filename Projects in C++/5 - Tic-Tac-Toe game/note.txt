Here's a step-wise explanation of the Tic-Tac-Toe game implementation in C++ for your notes.

---

## **Step-wise Explanation of Tic-Tac-Toe Game in C++**

### **Step 1: Define Constants and Declare the Board**
- We define a `3x3` 2D array (`board[][]`) to represent the Tic-Tac-Toe grid.
- Each cell initially contains numbers (`'1'` to `'9'`) to indicate available moves.

```cpp
const int SIZE = 3;
char board[SIZE][SIZE] = { {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'} };
```

---

### **Step 2: Function to Display the Board**
- Prints the Tic-Tac-Toe grid after every move.
- Separates rows and columns using `|` and horizontal lines.

```cpp
void displayBoard() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << " " << board[i][j] << " ";
            if (j < SIZE - 1) cout << "|"; // Column separator
        }
        cout << "\n";
        if (i < SIZE - 1) cout << "---|---|---\n"; // Row separator
    }
}
```

---

### **Step 3: Function to Check if a Player has Won**
- Checks all **rows**, **columns**, and **diagonals** for three matching symbols (`'X'` or `'O'`).

```cpp
bool checkWin(char player) {
    for (int i = 0; i < SIZE; i++) {
        // Check each row and column
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player))
            return true;
    }
    // Check diagonals
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player))
        return true;

    return false;
}
```

---

### **Step 4: Function to Check for a Draw**
- Loops through the board to see if any numbered cells are left.
- If all cells are occupied and no player has won, it's a **draw**.

```cpp
bool isDraw() {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (board[i][j] >= '1' && board[i][j] <= '9') return false; // Empty spot found
    return true;
}
```

---

### **Step 5: Function to Process a Player's Move**
- Prompts the **current player** (`'X'` or `'O'`) to enter a move (1-9).
- Converts input into **row and column indices**.
- **Validates the move**:
  - Checks if the input is within range (`1-9`).
  - Ensures the chosen cell is not already occupied.
- If valid, updates the board.

```cpp
bool makeMove(char player) {
    int move;
    cout << "\nPlayer " << player << ", enter your move (1-9): ";
    cin >> move;

    if (move < 1 || move > 9) {
        cout << "Invalid move! Try again.\n";
        return false;
    }

    int row = (move - 1) / SIZE;
    int col = (move - 1) % SIZE;

    if (board[row][col] == 'X' || board[row][col] == 'O') {
        cout << "Cell already occupied! Try again.\n";
        return false;
    }

    board[row][col] = player; // Place player's symbol
    return true;
}
```

---

### **Step 6: Main Function to Control Game Flow**
1. **Initialize Game Variables**
   - Set `currentPlayer = 'X'` (Player 1 starts).
   - `gameWon = false`.

2. **Display the Initial Board**  
   ```cpp
   displayBoard();
   ```

3. **Game Loop (Until a Win or Draw)**
   - Players take turns making moves.
   - **After each move:**
     - Update the board.
     - Check if the player **won** (`checkWin()`).
     - If no one wins, check for a **draw** (`isDraw()`).
     - Switch turns between `'X'` and `'O'`.

```cpp
int main() {
    char currentPlayer = 'X';
    bool gameWon = false;

    displayBoard();

    while (!gameWon && !isDraw()) {
        if (makeMove(currentPlayer)) {
            displayBoard();
            if (checkWin(currentPlayer)) {
                cout << "\nPlayer " << currentPlayer << " wins!\n";
                gameWon = true;
            } else if (isDraw()) {
                cout << "\nIt's a draw!\n";
            } else {
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X'; // Switch player
            }
        }
    }

    return 0;
}
```

---

### **Step 7: Execution Flow**
1. The board is displayed at the start.
2. Players **take turns** entering their moves.
3. The board updates after each move.
4. The program checks for a **win** or **draw** after every move.
5. The game continues until a player wins or it's a draw.

---

### **Example Game Run**
```
 1 | 2 | 3
---|---|---
 4 | 5 | 6
---|---|---
 7 | 8 | 9

Player X, enter your move (1-9): 5

 1 | 2 | 3
---|---|---
 4 | X | 6
---|---|---
 7 | 8 | 9

Player O, enter your move (1-9): 1

 O | 2 | 3
---|---|---
 4 | X | 6
---|---|---
 7 | 8 | 9
...
Player X wins!
```

---

## **Summary**
| **Step** | **Description** |
|----------|---------------|
| **Step 1** | Define board as a 3x3 array |
| **Step 2** | Create `displayBoard()` to print the game grid |
| **Step 3** | Implement `checkWin()` to verify a player's victory |
| **Step 4** | Implement `isDraw()` to check if the board is full |
| **Step 5** | Implement `makeMove()` to validate and process moves |
| **Step 6** | Write `main()` to control game flow and manage turns |
| **Step 7** | Run and test the game |

---

This structured explanation will help in understanding and modifying the game if needed. Let me know if you need any clarifications! ðŸš€