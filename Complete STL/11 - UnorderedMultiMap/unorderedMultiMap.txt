Here is a list of the **most commonly used member functions** in `std::unordered_multimap`, a hash-based associative container in C++ that stores key-value pairs. Unlike `std::unordered_map`, it allows **duplicate keys**.

---

### **1. Inserting and Modifying Elements**
- **`insert()`**: Inserts a key-value pair into the unordered multimap. Unlike `unordered_map`, duplicate keys are allowed.
  - Example:
    ```cpp
    std::unordered_multimap<int, std::string> umm;
    umm.insert({1, "Apple"});
    umm.insert({1, "Banana"}); // Allowed
    ```

- **`emplace()`**: Constructs and inserts a key-value pair directly in-place, avoiding unnecessary copying or moving.
  - Example:
    ```cpp
    umm.emplace(2, "Cherry");
    ```

- **`erase(key)`**: Removes all elements with the specified key.
  - Example:
    ```cpp
    umm.erase(1); // Removes all key-value pairs with key = 1
    ```

- **`clear()`**: Removes all elements from the unordered multimap.
  - Example:
    ```cpp
    umm.clear();
    ```

---

### **2. Lookup**
- **`find(key)`**: Returns an iterator to one of the elements with the specified key, or `end()` if the key does not exist.
  - Example:
    ```cpp
    auto it = umm.find(2);
    if (it != umm.end()) {
        std::cout << it->second;
    }
    ```

- **`equal_range(key)`**: Returns a pair of iterators representing the range of elements with the specified key. This is particularly useful for accessing all duplicates.
  - Example:
    ```cpp
    auto range = umm.equal_range(1);
    for (auto it = range.first; it != range.second; ++it) {
        std::cout << it->second << "\n";
    }
    ```

- **`count(key)`**: Returns the number of elements with the specified key.
  - Example:
    ```cpp
    std::cout << "Count of key 1: " << umm.count(1) << "\n";
    ```

---

### **3. Iterators**
- **`begin()` / `end()`**: Iterators to the first and one-past-the-last element, respectively.
- **`cbegin()` / `cend()`**: Constant iterators for read-only traversal.
  - Example:
    ```cpp
    for (auto it = umm.begin(); it != umm.end(); ++it) {
        std::cout << it->first << ": " << it->second << "\n";
    }
    ```

---

### **4. Capacity**
- **`size()`**: Returns the number of elements in the unordered multimap.
  - Example:
    ```cpp
    std::cout << "Size: " << umm.size() << "\n";
    ```

- **`empty()`**: Checks whether the unordered multimap is empty.
  - Example:
    ```cpp
    if (umm.empty()) {
        std::cout << "The multimap is empty.\n";
    }
    ```

- **`max_size()`**: Returns the maximum number of elements that the unordered multimap can theoretically hold.

---

### **5. Hash Policy**
- **`bucket_count()`**: Returns the number of buckets in the container.
- **`load_factor()`**: Returns the load factor, which is the average number of elements per bucket.
- **`rehash(n)`**: Reorganizes the hash table to have at least `n` buckets.
- **`reserve(n)`**: Prepares the container to hold at least `n` elements without rehashing.

---

### **Top 10 Most Commonly Used Functions**
1. **`insert()`**: Adds key-value pairs to the multimap.(\/)
2. **`emplace()`**: Efficiently constructs and inserts elements.(\/)
3. **`erase(key)`**: Removes all elements with a specific key.(\/)
4. **`find(key)`**: Searches for an element with the specified key.(\/)
5. **`equal_range(key)`**: Returns all elements with the specified key.(\/)
6. **`count(key)`**: Returns the number of elements with a specific key.(\/)
7. **`size()`**: Retrieves the total number of elements.(\/)
8. **`empty()`**: Checks if the multimap is empty.(\/)
9. **`clear()`**: Removes all elements.(\/)
10. **`begin()` / `end()`**: For iteration over the container.(\/)

---

### **Example of Common Operations**
```cpp
#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_multimap<int, std::string> umm;

    // Insert elements
    umm.insert({1, "Apple"});
    umm.insert({1, "Banana"});
    umm.emplace(2, "Cherry");

    // Access elements
    std::cout << "Count of key 1: " << umm.count(1) << "\n";

    // Iterate over duplicates
    auto range = umm.equal_range(1);
    for (auto it = range.first; it != range.second; ++it) {
        std::cout << "Key 1: " << it->second << "\n";
    }

    // Erase elements
    umm.erase(1);

    // Check if empty
    if (umm.empty()) {
        std::cout << "Multimap is now empty.\n";
    }

    return 0;
}
```

**Output**:
```
Count of key 1: 2
Key 1: Apple
Key 1: Banana
Multimap is now empty.
```

---

### **Why Use `std::unordered_multimap`?**
- **Fast Access**: Average **O(1)** for insertion, deletion, and lookup.
- **Duplicate Keys Allowed**: Unlike `unordered_map`, multiple elements can share the same key.
- **Unordered Structure**: Provides faster performance for large datasets compared to `std::multimap`.

Let me know if you'd like more examples or clarification!