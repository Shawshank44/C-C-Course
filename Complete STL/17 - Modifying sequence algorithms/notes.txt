In C++, the Standard Template Library (STL) provides several **modifying sequence algorithms** that allow you to modify the elements of a container in various ways. Below is a complete list of commonly used modifying sequence algorithms, along with a brief explanation and example for each:

---

### 1. **`std::copy`**
Copies elements from one range to another.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> source = {1, 2, 3, 4, 5};
    std::vector<int> destination(5);

    std::copy(source.begin(), source.end(), destination.begin());

    for (int x : destination) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 2. **`std::copy_if`**
Copies elements that satisfy a condition.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> source = {1, 2, 3, 4, 5, 6};
    std::vector<int> destination;

    std::copy_if(source.begin(), source.end(), std::back_inserter(destination), [](int x) {
        return x % 2 == 0;
    });

    for (int x : destination) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 3. **`std::copy_n`**
Copies a specific number of elements.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> source = {1, 2, 3, 4, 5};
    std::vector<int> destination(3);

    std::copy_n(source.begin(), 3, destination.begin());

    for (int x : destination) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 4. **`std::move`**
Moves elements from one range to another (useful for non-copyable types).

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

int main() {
    std::vector<std::string> source = {"one", "two", "three"};
    std::vector<std::string> destination(3);

    std::move(source.begin(), source.end(), destination.begin());

    for (const auto& str : destination) {
        std::cout << str << " ";
    }

    return 0;
}
```

---

### 5. **`std::transform`**
Applies a function to a range of elements.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> source = {1, 2, 3, 4, 5};
    std::vector<int> destination(5);

    std::transform(source.begin(), source.end(), destination.begin(), [](int x) {
        return x * x;
    });

    for (int x : destination) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 6. **`std::swap_ranges`**
Swaps elements between two ranges.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec1 = {1, 2, 3};
    std::vector<int> vec2 = {4, 5, 6};

    std::swap_ranges(vec1.begin(), vec1.end(), vec2.begin());

    for (int x : vec1) {
        std::cout << x << " ";
    }
    std::cout << "\n";
    for (int x : vec2) {
        std::cout << x << " ";
    }

    return 0;
}
```

---

### 7. **`std::fill`**
Fills a range with a specific value.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec(5);

    std::fill(vec.begin(), vec.end(), 42);

    for (int x : vec) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 8. **`std::fill_n`**
Fills a specific number of elements with a value.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec(5);

    std::fill_n(vec.begin(), 3, 42);

    for (int x : vec) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 9. **`std::replace`**
Replaces all occurrences of a value with another value.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 2, 2, 3, 2};

    std::replace(vec.begin(), vec.end(), 2, 42);

    for (int x : vec) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 10. **`std::replace_if`**
Replaces elements that satisfy a condition.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    std::replace_if(vec.begin(), vec.end(), [](int x) { return x % 2 == 0; }, 42);

    for (int x : vec) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 11. **`std::remove` / `std::remove_if`**
Removes elements from a range (logical removal).

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 2, 3, 2, 4, 5};

    vec.erase(std::remove(vec.begin(), vec.end(), 2), vec.end());

    for (int x : vec) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

### 12. **`std::unique`**
Removes consecutive duplicate elements.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 1, 2, 2, 3, 3, 4};

    vec.erase(std::unique(vec.begin(), vec.end()), vec.end());

    for (int x : vec) {
        std::cout << x << " ";
    }
    return 0;
}
```

---

These algorithms cover a wide variety of use cases for modifying sequences in C++. By combining them, you can perform complex modifications with concise and efficient code. Let me know if you'd like detailed examples or explanations for any specific algorithm!


Hereâ€™s a concise table summarizing the most commonly used modifying sequence algorithms in STL for your notes:

| **Function**       | **Description**                                                                 | **Example Use Case**                                     | **Header**      |
|---------------------|---------------------------------------------------------------------------------|----------------------------------------------------------|-----------------|
| `std::copy`         | Copies elements from one range to another.(\/)                                 | Copy elements from a source vector to another.           | `<algorithm>`   |
| `std::copy_if`      | Copies elements that satisfy a condition.(\/)                                  | Copy even numbers to a new container.                    | `<algorithm>`   |
| `std::copy_n`       | Copies a specific number of elements.(\/)                                      | Copy the first 5 elements to a new vector.               | `<algorithm>`   |
| `std::move`         | Moves elements (instead of copying) to another range.(\/)                      | Move strings between containers to avoid copying.         | `<algorithm>`   |
| `std::transform`    | Applies a function to each element in a range.(\/)                             | Square each element in a vector.                         | `<algorithm>`   |
| `std::swap_ranges`  | Swaps elements between two ranges.(\/)                                         | Exchange contents of two vectors.                        | `<algorithm>`   |
| `std::fill`         | Assigns a specific value to all elements in a range.(\/)                       | Fill a vector with zeros.                                | `<algorithm>`   |
| `std::fill_n`       | Assigns a specific value to a fixed number of elements.(\/)                       | Fill the first 3 elements of a vector with `42`.         | `<algorithm>`   |
| `std::replace`      | Replaces all occurrences of a value with another.(\/)                              | Replace all `2`s in a vector with `99`.                  | `<algorithm>`   |
| `std::replace_if`   | Replaces elements that satisfy a condition.(\/)                                    | Replace all even numbers with `0`.                       | `<algorithm>`   |
| `std::remove`       | Removes all occurrences of a value (logical removal).(\/)                         | Remove all `2`s from a vector.                           | `<algorithm>`   |
| `std::remove_if`    | Removes elements satisfying a condition.(\/)                                    | Remove all negative numbers.                             | `<algorithm>`   |
| `std::unique`       | Removes consecutive duplicates from a range.(\/)                                   | Remove consecutive repeated values in a sorted vector.   | `<algorithm>`   |

This table organizes the functions by purpose, making it easy to refer back to them during development or study. Let me know if you'd like to expand on any of these!