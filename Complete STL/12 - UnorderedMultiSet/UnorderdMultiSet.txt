Here is a list of the **most commonly used member functions** in `std::unordered_multiset`, a hash-based associative container in C++ that stores **multiple identical elements** without any specific order. It allows **duplicate elements**, unlike `std::unordered_set`.

---

### **1. Inserting and Removing Elements**
- **`insert()`**: Adds an element to the unordered multiset. Duplicate elements are allowed.
  - Example:
    ```cpp
    std::unordered_multiset<int> ums;
    ums.insert(10);
    ums.insert(10); // Allowed
    ums.insert(20);
    ```

- **`emplace()`**: Constructs and inserts an element directly in-place without unnecessary copying or moving.
  - Example:
    ```cpp
    ums.emplace(30);
    ```

- **`erase()`**: Removes elements by value or by iterator. For duplicate elements, only one instance is removed unless specified otherwise.
  - Example:
    ```cpp
    ums.erase(10); // Removes all occurrences of 10
    ```

- **`clear()`**: Removes all elements from the unordered multiset.
  - Example:
    ```cpp
    ums.clear();
    ```

---

### **2. Lookup**
- **`find()`**: Returns an iterator to one of the occurrences of the specified element, or `end()` if the element is not found.
  - Example:
    ```cpp
    auto it = ums.find(20);
    if (it != ums.end()) {
        std::cout << "Found: " << *it << "\n";
    }
    ```

- **`count()`**: Returns the number of occurrences of a specific element.
  - Example:
    ```cpp
    std::cout << "Count of 10: " << ums.count(10) << "\n";
    ```

- **`equal_range()`**: Returns a pair of iterators representing the range of all occurrences of a specific element.
  - Example:
    ```cpp
    auto range = ums.equal_range(10);
    for (auto it = range.first; it != range.second; ++it) {
        std::cout << *it << " ";
    }
    ```

---

### **3. Iterators**
- **`begin()` / `end()`**: Iterators to the first and one-past-the-last element, respectively.
- **`cbegin()` / `cend()`**: Constant iterators for read-only access.
  - Example:
    ```cpp
    for (auto it = ums.begin(); it != ums.end(); ++it) {
        std::cout << *it << " ";
    }
    ```

---

### **4. Capacity**
- **`size()`**: Returns the number of elements in the unordered multiset, including duplicates.
  - Example:
    ```cpp
    std::cout << "Size: " << ums.size() << "\n";
    ```

- **`empty()`**: Checks whether the unordered multiset is empty.
  - Example:
    ```cpp
    if (ums.empty()) {
        std::cout << "The multiset is empty.\n";
    }
    ```

- **`max_size()`**: Returns the maximum number of elements that the unordered multiset can theoretically hold.

---

### **5. Hash Policy**
- **`bucket_count()`**: Returns the number of buckets in the container.
- **`load_factor()`**: Returns the load factor, which is the average number of elements per bucket.
- **`rehash(n)`**: Reorganizes the hash table to have at least `n` buckets.
- **`reserve(n)`**: Prepares the container to hold at least `n` elements without rehashing.

---

### **Top 10 Most Commonly Used Functions**
1. **`insert()`**: Adds elements (duplicates allowed).(\/)
2. **`emplace()`**: Efficient in-place insertion.(\/)
3. **`erase()`**: Removes elements by value or iterator.(\/)
4. **`find()`**: Searches for an element.(\/)
5. **`count()`**: Counts the occurrences of an element.(\/)
6. **`equal_range()`**: Retrieves all instances of an element.(\/)
7. **`size()`**: Returns the total number of elements.(\/)
8. **`empty()`**: Checks if the container is empty.(\/)
9. **`clear()`**: Removes all elements from the container.(\/)
10. **`begin()` / `end()`**: For iterating over elements.(\/)

---

### **Example of Common Operations**
```cpp
#include <iostream>
#include <unordered_set>

int main() {
    std::unordered_multiset<int> ums;

    // Insert elements
    ums.insert(10);
    ums.insert(10); // Duplicate allowed
    ums.insert(20);

    // Count occurrences
    std::cout << "Count of 10: " << ums.count(10) << "\n";

    // Find and erase
    auto it = ums.find(10);
    if (it != ums.end()) {
        ums.erase(it); // Removes one occurrence of 10
    }

    // Iterate over elements
    for (const auto& elem : ums) {
        std::cout << elem << " ";
    }
    std::cout << "\n";

    // Size of the multiset
    std::cout << "Size: " << ums.size() << "\n";

    return 0;
}
```

**Output**:
```
Count of 10: 2
10 20
Size: 2
```

---

### **Why Use `std::unordered_multiset`?**
- **Duplicates Allowed**: Unlike `unordered_set`, it allows multiple identical elements.
- **Fast Insertions and Lookups**: Average **O(1)** complexity for most operations.
- **Unordered**: Provides better performance than `std::multiset` for large datasets when ordering is not required.

Let me know if youâ€™d like further clarification or examples!