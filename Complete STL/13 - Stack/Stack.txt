### **Stack STL in C++**

The **Stack** in C++ Standard Template Library (STL) is a container adapter that operates in a **Last-In-First-Out (LIFO)** manner. Elements are added (pushed) and removed (popped) only from the top of the stack.

It is implemented as a container adapter, which means it uses an underlying container (usually `deque` by default) to provide its functionality. You can also use `vector` or `list` as the underlying container.

---

### **Key Characteristics**
- **LIFO**: The last element added is the first to be removed.
- **Efficient Operations**: Operations like `push`, `pop`, `top`, and `empty` are fast.
- **Underlying Container**: The default container is `deque`, but it can be customized.

---

### **Header File**
To use `std::stack`, include the header:
```cpp
#include <stack>
```

---

### **Common Member Functions**

Here are the most commonly used functions in the `std::stack` class:

#### **1. `push()`**
Adds an element to the top of the stack.
- **Complexity**: O(1)
- **Example**:
    ```cpp
    std::stack<int> s;
    s.push(10); // Adds 10
    s.push(20); // Adds 20
    ```

#### **2. `pop()`**
Removes the top element from the stack.
- **Complexity**: O(1)
- **Example**:
    ```cpp
    s.pop(); // Removes 20 (last inserted element)
    ```

#### **3. `top()`**
Returns a reference to the top element without removing it.
- **Complexity**: O(1)
- **Example**:
    ```cpp
    int x = s.top(); // Gets the top element (10)
    ```

#### **4. `empty()`**
Checks if the stack is empty.
- **Complexity**: O(1)
- **Example**:
    ```cpp
    if (s.empty()) {
        std::cout << "Stack is empty.\n";
    }
    ```

#### **5. `size()`**
Returns the number of elements in the stack.
- **Complexity**: O(1)
- **Example**:
    ```cpp
    std::cout << "Stack size: " << s.size() << "\n";
    ```

#### **6. `emplace()`**
Constructs and adds a new element at the top of the stack.
- **Complexity**: O(1)
- **Example**:
    ```cpp
    s.emplace(30); // Adds 30 to the stack
    ```

---

### **Example: Stack Operations**
```cpp
#include <iostream>
#include <stack>

int main() {
    std::stack<int> s;

    // Push elements
    s.push(10);
    s.push(20);
    s.push(30);

    // Display top element
    std::cout << "Top element: " << s.top() << "\n";

    // Pop the top element
    s.pop();
    std::cout << "After pop, top element: " << s.top() << "\n";

    // Check size
    std::cout << "Stack size: " << s.size() << "\n";

    // Check if empty
    if (!s.empty()) {
        std::cout << "Stack is not empty.\n";
    }

    return 0;
}
```

**Output**:
```
Top element: 30
After pop, top element: 20
Stack size: 2
Stack is not empty.
```

---

### **Most Used Member Functions in Stack STL**

1. **`push()`**: Adds an element to the stack.(\/)
2. **`pop()`**: Removes the top element.(\/)
3. **`top()`**: Accesses the top element.(\/)
4. **`empty()`**: Checks if the stack is empty.(\/)
5. **`size()`**: Returns the number of elements.(\/)
6. **`emplace()`**: Constructs and adds an element at the top.(\/)

---

### **Customizing the Underlying Container**

By default, `std::stack` uses `std::deque` as the underlying container, but you can specify other containers like `std::vector` or `std::list`.

- **Using `vector` as underlying container**:
    ```cpp
    std::stack<int, std::vector<int>> s;
    ```

- **Using `list` as underlying container**:
    ```cpp
    std::stack<int, std::list<int>> s;
    ```

---

### **Limitations of Stack**
1. **Limited Access**: You can only access the top element.
2. **No Iterators**: Unlike other containers, `std::stack` does not support iterators.

---

Let me know if you'd like more examples or deeper explanations!