Here’s a list of the **most commonly used member functions** in `std::map`, categorized based on their functionality. These functions are essential for working with associative containers in C++.

---

### **1. Element Access**
- **`at(key)`**: Returns a reference to the value associated with the given key, with bounds checking.  
  - Example:
    ```cpp
    std::map<int, std::string> m = {{1, "A"}, {2, "B"}};
    std::cout << m.at(1); // Outputs: A
    ```

- **`operator[key]`**: Accesses or inserts an element with the given key. If the key doesn’t exist, it inserts the key with a default value.  
  - Example:
    ```cpp
    m[3] = "C"; // Adds key 3 with value "C"
    ```

---

### **2. Modifying the Map**
- **`insert(pair)`**: Inserts a key-value pair into the map.  
- **`emplace(key, value)`**: Constructs and inserts a key-value pair directly.  
- **`erase(key)`**: Removes the element with the specified key.  
- **`clear()`**: Removes all elements from the map.  
- **`swap(other_map)`**: Swaps the contents of two maps.

---

### **3. Iterators**
- **`begin()` / `end()`**: Iterators to the first and one-past-the-last element, respectively.  
- **`rbegin()` / `rend()`**: Reverse iterators to the last and one-before-the-first element.  
- **`cbegin()` / `cend()`**: Constant iterators for read-only traversal.

---

### **4. Lookup**
- **`find(key)`**: Returns an iterator to the element with the specified key, or `end()` if the key is not found.  
- **`count(key)`**: Returns `1` if the key exists, otherwise `0`.  
- **`lower_bound(key)`**: Returns an iterator to the first element not less than the given key.  
- **`upper_bound(key)`**: Returns an iterator to the first element greater than the given key.  
- **`equal_range(key)`**: Returns a pair of iterators for the range of elements matching the given key.

---

### **5. Capacity**
- **`size()`**: Returns the number of elements in the map.  
- **`empty()`**: Checks if the map is empty.  
- **`max_size()`**: Returns the maximum number of elements the map can hold.

---

### **Top 10 Most Commonly Used Functions**
If you're focusing on the most frequent operations:
0. **`at()`**(\/)
1. **`operator[key]`**: Access or insert elements using a key.(\/)
2. **`insert(pair)`**: Insert key-value pairs.  (\/)
3. **`find(key)`**: Locate elements by key.  (\/)
4. **`erase(key)`**: Remove elements by key.  (\/)
5. **`size()`**: Get the number of elements.  (\/)
6. **`empty()`**: Check if the map is empty.  (\/)
7. **`begin()` / `end()`**: Iterate through the map.  (\/)
8. **`clear()`**: Remove all elements.  (\/)
9. **`count(key)`**: Check if a key exists.  (\/)
10. **`emplace(key, value)`**: Insert elements efficiently without unnecessary copying.(\/)

---

### **Why Use `std::map`?**
- **Ordered Keys**: Keys are stored in sorted order (by default, ascending).
- **Logarithmic Complexity**: Insertion, deletion, and lookup are all **O(log n)**.
- **Unique Keys**: Only one value is associated with each key.

---

### Example of Common Operations
```cpp
#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> m;

    // Insert elements
    m[1] = "Apple"; // Using operator[]
    m.insert({2, "Banana"}); // Using insert
    m.emplace(3, "Cherry"); // Using emplace

    // Access elements
    std::cout << m.at(1) << "\n"; // Outputs: Apple
    std::cout << m[2] << "\n"; // Outputs: Banana

    // Check size and presence
    std::cout << "Size: " << m.size() << "\n"; // Outputs: Size: 3
    if (m.count(3)) {
        std::cout << "Key 3 found\n";
    }

    // Iterate and print
    for (const auto& pair : m) {
        std::cout << pair.first << ": " << pair.second << "\n";
    }

    // Erase elements
    m.erase(2);

    return 0;
}
```
**Output**:
```
Apple
Banana
Size: 3
Key 3 found
1: Apple
2: Banana
3: Cherry
```

Let me know if you'd like deeper explanations or examples for specific functions!